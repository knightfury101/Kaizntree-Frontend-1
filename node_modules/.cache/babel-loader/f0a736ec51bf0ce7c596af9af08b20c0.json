{"ast":null,"code":"var _jsxFileName = \"D:\\\\projects\\\\kaizntree_frontend_1\\\\src\\\\App.tsx\",\n    _s = $RefreshSig$();\n\nimport { Fragment, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n\n  const [selectedEmployeeId, setSelectedEmployeeId] = useState(null); // Add state\n\n  const {\n    data: employees,\n    ...employeeUtils\n  } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    ...paginatedTransactionsUtils\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    ...transactionsByEmployeeUtils\n  } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n  const transactions = useMemo(() => {\n    var _paginatedTransaction;\n\n    return selectedEmployeeId ? transactionsByEmployee !== null && transactionsByEmployee !== void 0 ? transactionsByEmployee : null : (_paginatedTransaction = paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.data) !== null && _paginatedTransaction !== void 0 ? _paginatedTransaction : null;\n  }, [selectedEmployeeId, paginatedTransactions, transactionsByEmployee]);\n  const loadAllTransactions = useCallback(async () => {\n    console.log(\"loadAllTransactions initiated\"); // Before everything\n\n    setIsLoading(true);\n    console.log(\"loadAllTransactions: isLoading set to\", isLoading);\n    transactionsByEmployeeUtils.invalidateData();\n    console.log(\"loadAllTransactions: transactionsByEmployee data invalidated\");\n    await employeeUtils.fetchAll();\n    console.log(\"loadAllTransactions: employeeUtils.loading after fetchAll()\", employeeUtils.loading);\n    await paginatedTransactionsUtils.fetchAll();\n    console.log(\"loadAllTransactions: paginatedTransactionsUtils.loading after fetchAll()\", paginatedTransactionsUtils.loading);\n    setIsLoading(false);\n    console.log(\"loadAllTransactions: isLoading set to\", isLoading);\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  const loadTransactionsByEmployee = useCallback(async employeeId => {\n    paginatedTransactionsUtils.invalidateData();\n    await transactionsByEmployeeUtils.fetchById(employeeId);\n  }, [paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions();\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"KaizntreeBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        isLoading: isLoading,\n        defaultValue: EMPTY_EMPLOYEE,\n        items: employees === null ? [] : [EMPTY_EMPLOYEE, ...employees],\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees\",\n        parseItem: item => ({\n          value: item.id,\n          label: `${item.firstName} ${item.lastName}`\n        }),\n        onChange: async newValue => {\n          if (newValue === null) {\n            setSelectedEmployeeId(null); // Clear employeeId when \"All Employees\" is selected\n\n            return;\n          }\n\n          setSelectedEmployeeId(newValue.id); // Set employeeId\n\n          await loadTransactionsByEmployee(newValue.id);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"KaizntreeBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"KaizntreeGrid\",\n        children: [/*#__PURE__*/_jsxDEV(Transactions, {\n          transactions: transactions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this), transactions !== null && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"KaizntreeButton\",\n          disabled: paginatedTransactionsUtils.loading,\n          onClick: async () => {\n            await loadAllTransactions();\n          },\n          children: \"View More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"5EFTt+V+leRM5nHfUuK/VD+wajM=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useCallback","useEffect","useMemo","useState","InputSelect","Instructions","Transactions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","App","selectedEmployeeId","setSelectedEmployeeId","data","employees","employeeUtils","paginatedTransactions","paginatedTransactionsUtils","transactionsByEmployee","transactionsByEmployeeUtils","isLoading","setIsLoading","transactions","loadAllTransactions","console","log","invalidateData","fetchAll","loading","loadTransactionsByEmployee","employeeId","fetchById","item","value","id","label","firstName","lastName","newValue"],"sources":["D:/projects/kaizntree_frontend_1/src/App.tsx"],"sourcesContent":["import { Fragment, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { Employee } from \"./utils/types\";\n\nexport function App() {\n  const [selectedEmployeeId, setSelectedEmployeeId] = useState<string | null>(\n    null\n  ); // Add state\n\n  const { data: employees, ...employeeUtils } = useEmployees();\n  const { data: paginatedTransactions, ...paginatedTransactionsUtils } =\n    usePaginatedTransactions();\n  const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } =\n    useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n\n  const transactions = useMemo(\n    () =>\n      selectedEmployeeId\n        ? transactionsByEmployee ?? null\n        : paginatedTransactions?.data ?? null,\n    [selectedEmployeeId, paginatedTransactions, transactionsByEmployee]\n  );\n\n  const loadAllTransactions = useCallback(async () => {\n    console.log(\"loadAllTransactions initiated\"); // Before everything\n\n    setIsLoading(true);\n    console.log(\"loadAllTransactions: isLoading set to\", isLoading);\n\n    transactionsByEmployeeUtils.invalidateData();\n    console.log(\"loadAllTransactions: transactionsByEmployee data invalidated\");\n\n    await employeeUtils.fetchAll();\n    console.log(\n      \"loadAllTransactions: employeeUtils.loading after fetchAll()\",\n      employeeUtils.loading\n    );\n\n    await paginatedTransactionsUtils.fetchAll();\n    console.log(\n      \"loadAllTransactions: paginatedTransactionsUtils.loading after fetchAll()\",\n      paginatedTransactionsUtils.loading\n    );\n\n    setIsLoading(false);\n    console.log(\"loadAllTransactions: isLoading set to\", isLoading);\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n\n  const loadTransactionsByEmployee = useCallback(\n    async (employeeId: string) => {\n      paginatedTransactionsUtils.invalidateData();\n      await transactionsByEmployeeUtils.fetchById(employeeId);\n    },\n    [paginatedTransactionsUtils, transactionsByEmployeeUtils]\n  );\n\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions();\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions]);\n\n  return (\n    <Fragment>\n      <main className=\"MainContainer\">\n        <Instructions />\n\n        <hr className=\"KaizntreeBreak--l\" />\n\n        <InputSelect<Employee>\n          isLoading={isLoading}\n          defaultValue={EMPTY_EMPLOYEE}\n          items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n          label=\"Filter by employee\"\n          loadingLabel=\"Loading employees\"\n          parseItem={(item) => ({\n            value: item.id,\n            label: `${item.firstName} ${item.lastName}`,\n          })}\n          onChange={async (newValue) => {\n            if (newValue === null) {\n              setSelectedEmployeeId(null); // Clear employeeId when \"All Employees\" is selected\n              return;\n            }\n\n            setSelectedEmployeeId(newValue.id); // Set employeeId\n            await loadTransactionsByEmployee(newValue.id);\n          }}\n        />\n\n        <div className=\"KaizntreeBreak--l\" />\n\n        <div className=\"KaizntreeGrid\">\n          <Transactions transactions={transactions} />\n\n          {transactions !== null && (\n            <button\n              className=\"KaizntreeButton\"\n              disabled={paginatedTransactionsUtils.loading}\n              onClick={async () => {\n                await loadAllTransactions();\n              }}\n            >\n              View More\n            </button>\n          )}\n        </div>\n      </main>\n    </Fragment>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}