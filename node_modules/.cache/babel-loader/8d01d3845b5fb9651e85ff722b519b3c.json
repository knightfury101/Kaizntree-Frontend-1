{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from \"react\";\nimport { useCustomFetch } from \"./useCustomFetch\";\nexport function usePaginatedTransactions() {\n  _s();\n\n  const {\n    fetchWithCache,\n    loading\n  } = useCustomFetch();\n  const [paginatedTransactions, setPaginatedTransactions] = useState(null);\n  const fetchAll = useCallback(async () => {\n    console.log(\"usePaginatedTransactions: fetchAll initiated\");\n\n    try {\n      const response = await fetchWithCache(\"paginatedTransactions\" // ... your fetch params\n      ); // ... rest of your logic\n\n      console.log(\"usePaginatedTransactions: Transaction data fetched and set\");\n    } catch (error) {\n      // Ensure you have error handling!\n      console.error(\"usePaginatedTransactions: Error fetching transactions\", error);\n    }\n  }, [fetchWithCache, paginatedTransactions]);\n  const {\n    transactions,\n    next\n  } = response;\n  setPaginatedTransactions({\n    data: transactions,\n    nextPage: next\n  });\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions(null);\n  }, []);\n  return {\n    data: paginatedTransactions,\n    loading,\n    fetchAll,\n    invalidateData\n  };\n}\n\n_s(usePaginatedTransactions, \"5C7xQHueO9nKLl+7c12EAAA+DoA=\", false, function () {\n  return [useCustomFetch];\n});","map":{"version":3,"names":["useCallback","useState","useCustomFetch","usePaginatedTransactions","fetchWithCache","loading","paginatedTransactions","setPaginatedTransactions","fetchAll","console","log","response","error","transactions","next","data","nextPage","invalidateData"],"sources":["D:/projects/kaizntree_frontend_1/src/hooks/usePaginatedTransactions.ts"],"sourcesContent":["import { useCallback, useState } from \"react\";\nimport {\n  PaginatedRequestParams,\n  PaginatedResponse,\n  Transaction,\n} from \"../utils/types\";\nimport { PaginatedTransactionsResult } from \"./types\";\nimport { useCustomFetch } from \"./useCustomFetch\";\n\nexport function usePaginatedTransactions(): PaginatedTransactionsResult {\n  const { fetchWithCache, loading } = useCustomFetch();\n  const [paginatedTransactions, setPaginatedTransactions] =\n    useState<PaginatedResponse<Transaction[]> | null>(null);\n\n  const fetchAll = useCallback(async () => {\n    console.log(\"usePaginatedTransactions: fetchAll initiated\");\n\n    try {\n      const response = await fetchWithCache<\n        PaginatedResponse<Transaction[]>,\n        PaginatedRequestParams\n      >(\n        \"paginatedTransactions\"\n        // ... your fetch params\n      );\n      // ... rest of your logic\n      console.log(\"usePaginatedTransactions: Transaction data fetched and set\");\n    } catch (error) {\n      // Ensure you have error handling!\n      console.error(\n        \"usePaginatedTransactions: Error fetching transactions\",\n        error\n      );\n    }\n  }, [fetchWithCache, paginatedTransactions]);\n\n  const { transactions, next } = response;\n\n  setPaginatedTransactions({ data: transactions, nextPage: next });\n\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions(null);\n  }, []);\n\n  return { data: paginatedTransactions, loading, fetchAll, invalidateData };\n}\n"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AAOA,SAASC,cAAT,QAA+B,kBAA/B;AAEA,OAAO,SAASC,wBAAT,GAAiE;EAAA;;EACtE,MAAM;IAAEC,cAAF;IAAkBC;EAAlB,IAA8BH,cAAc,EAAlD;EACA,MAAM,CAACI,qBAAD,EAAwBC,wBAAxB,IACJN,QAAQ,CAA0C,IAA1C,CADV;EAGA,MAAMO,QAAQ,GAAGR,WAAW,CAAC,YAAY;IACvCS,OAAO,CAACC,GAAR,CAAY,8CAAZ;;IAEA,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMP,cAAc,CAInC,uBAJmC,CAKnC;MALmC,CAArC,CADE,CAQF;;MACAK,OAAO,CAACC,GAAR,CAAY,4DAAZ;IACD,CAVD,CAUE,OAAOE,KAAP,EAAc;MACd;MACAH,OAAO,CAACG,KAAR,CACE,uDADF,EAEEA,KAFF;IAID;EACF,CApB2B,EAoBzB,CAACR,cAAD,EAAiBE,qBAAjB,CApByB,CAA5B;EAsBA,MAAM;IAAEO,YAAF;IAAgBC;EAAhB,IAAyBH,QAA/B;EAEAJ,wBAAwB,CAAC;IAAEQ,IAAI,EAAEF,YAAR;IAAsBG,QAAQ,EAAEF;EAAhC,CAAD,CAAxB;EAEA,MAAMG,cAAc,GAAGjB,WAAW,CAAC,MAAM;IACvCO,wBAAwB,CAAC,IAAD,CAAxB;EACD,CAFiC,EAE/B,EAF+B,CAAlC;EAIA,OAAO;IAAEQ,IAAI,EAAET,qBAAR;IAA+BD,OAA/B;IAAwCG,QAAxC;IAAkDS;EAAlD,CAAP;AACD;;GApCed,wB;UACsBD,c"},"metadata":{},"sourceType":"module"}