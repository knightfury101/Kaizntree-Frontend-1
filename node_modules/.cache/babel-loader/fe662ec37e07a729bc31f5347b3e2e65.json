{"ast":null,"code":"var _jsxFileName = \"D:\\\\projects\\\\kaizntree_frontend_1\\\\src\\\\components\\\\Transactions\\\\index.tsx\",\n    _s = $RefreshSig$();\n\n// index.tsx\nimport { useCallback, useState } from \"react\";\nimport { useCustomFetch } from \"src/hooks/useCustomFetch\";\nimport { TransactionPane } from \"./TransactionPane\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Transactions = _ref => {\n  _s();\n\n  let {\n    transactions: initialTransactions\n  } = _ref;\n  const {\n    fetchWithoutCache,\n    loading\n  } = useCustomFetch();\n  const [transactions, setTransactions] = useState(initialTransactions);\n  const setTransactionApproval = useCallback(async _ref2 => {\n    let {\n      transactionId,\n      newValue\n    } = _ref2;\n    await fetchWithoutCache(\"setTransactionApproval\", {\n      transactionId,\n      value: newValue\n    }); // Update the approval status of the transaction locally\n\n    if (transactions) {\n      const updatedTransactions = transactions.map(transaction => {\n        if (transaction.id === transactionId) {\n          return { ...transaction,\n            approved: newValue\n          };\n        }\n\n        return transaction;\n      });\n      setTransactions(updatedTransactions);\n    }\n  }, [fetchWithoutCache, transactions]);\n\n  const loadMoreTransactions = async () => {\n    // Fetch new transactions\n    const newTransactions = await fetchWithoutCache(\"loadMoreTransactions\"); // Merge new transactions with existing ones\n\n    if (transactions && newTransactions) {\n      setTransactions([...transactions, ...newTransactions]);\n    }\n  };\n\n  if (!transactions) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"KaizntreeLoading--container\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    \"data-testid\": \"transaction-container\",\n    children: [transactions.map(transaction => /*#__PURE__*/_jsxDEV(TransactionPane, {\n      transaction: transaction,\n      loading: loading,\n      setTransactionApproval: setTransactionApproval\n    }, transaction.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: loadMoreTransactions,\n      disabled: loading,\n      children: \"View More\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Transactions, \"klfozYtF5rfpfxm3CRoIgy0llIM=\", false, function () {\n  return [useCustomFetch];\n});\n\n_c = Transactions;\n\nvar _c;\n\n$RefreshReg$(_c, \"Transactions\");","map":{"version":3,"names":["useCallback","useState","useCustomFetch","TransactionPane","Transactions","transactions","initialTransactions","fetchWithoutCache","loading","setTransactions","setTransactionApproval","transactionId","newValue","value","updatedTransactions","map","transaction","id","approved","loadMoreTransactions","newTransactions"],"sources":["D:/projects/kaizntree_frontend_1/src/components/Transactions/index.tsx"],"sourcesContent":["// index.tsx\n\nimport { useCallback, useState } from \"react\";\nimport { useCustomFetch } from \"src/hooks/useCustomFetch\";\nimport { SetTransactionApprovalParams } from \"src/utils/types\";\nimport { TransactionPane } from \"./TransactionPane\";\nimport { SetTransactionApprovalFunction, TransactionsComponent } from \"./types\";\nimport { Transaction } from \"src/utils/types\";\n\nexport const Transactions: TransactionsComponent = ({\n  transactions: initialTransactions,\n}) => {\n  const { fetchWithoutCache, loading } = useCustomFetch();\n  const [transactions, setTransactions] = useState<Transaction[] | null>(\n    initialTransactions\n  );\n\n  const setTransactionApproval = useCallback<SetTransactionApprovalFunction>(\n    async ({ transactionId, newValue }) => {\n      await fetchWithoutCache<void, SetTransactionApprovalParams>(\n        \"setTransactionApproval\",\n        {\n          transactionId,\n          value: newValue,\n        }\n      );\n      // Update the approval status of the transaction locally\n      if (transactions) {\n        const updatedTransactions = transactions.map((transaction) => {\n          if (transaction.id === transactionId) {\n            return { ...transaction, approved: newValue };\n          }\n          return transaction;\n        });\n        setTransactions(updatedTransactions);\n      }\n    },\n    [fetchWithoutCache, transactions]\n  );\n\n  const loadMoreTransactions = async (): Promise<any> => {\n    // Fetch new transactions\n    const newTransactions = await fetchWithoutCache<Transaction[], void>(\n      \"loadMoreTransactions\"\n    );\n    // Merge new transactions with existing ones\n    if (transactions && newTransactions) {\n      setTransactions([...transactions, ...newTransactions]);\n    }\n  };\n\n  if (!transactions) {\n    return <div className=\"KaizntreeLoading--container\">Loading...</div>;\n  }\n\n  return (\n    <div data-testid=\"transaction-container\">\n      {transactions.map((transaction) => (\n        <TransactionPane\n          key={transaction.id}\n          transaction={transaction}\n          loading={loading}\n          setTransactionApproval={setTransactionApproval}\n        />\n      ))}\n      <button onClick={loadMoreTransactions} disabled={loading}>\n        View More\n      </button>\n    </div>\n  );\n};\n"],"mappings":";;;AAAA;AAEA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AACA,SAASC,cAAT,QAA+B,0BAA/B;AAEA,SAASC,eAAT,QAAgC,mBAAhC;;AAIA,OAAO,MAAMC,YAAmC,GAAG,QAE7C;EAAA;;EAAA,IAF8C;IAClDC,YAAY,EAAEC;EADoC,CAE9C;EACJ,MAAM;IAAEC,iBAAF;IAAqBC;EAArB,IAAiCN,cAAc,EAArD;EACA,MAAM,CAACG,YAAD,EAAeI,eAAf,IAAkCR,QAAQ,CAC9CK,mBAD8C,CAAhD;EAIA,MAAMI,sBAAsB,GAAGV,WAAW,CACxC,eAAuC;IAAA,IAAhC;MAAEW,aAAF;MAAiBC;IAAjB,CAAgC;IACrC,MAAML,iBAAiB,CACrB,wBADqB,EAErB;MACEI,aADF;MAEEE,KAAK,EAAED;IAFT,CAFqB,CAAvB,CADqC,CAQrC;;IACA,IAAIP,YAAJ,EAAkB;MAChB,MAAMS,mBAAmB,GAAGT,YAAY,CAACU,GAAb,CAAkBC,WAAD,IAAiB;QAC5D,IAAIA,WAAW,CAACC,EAAZ,KAAmBN,aAAvB,EAAsC;UACpC,OAAO,EAAE,GAAGK,WAAL;YAAkBE,QAAQ,EAAEN;UAA5B,CAAP;QACD;;QACD,OAAOI,WAAP;MACD,CAL2B,CAA5B;MAMAP,eAAe,CAACK,mBAAD,CAAf;IACD;EACF,CAnBuC,EAoBxC,CAACP,iBAAD,EAAoBF,YAApB,CApBwC,CAA1C;;EAuBA,MAAMc,oBAAoB,GAAG,YAA0B;IACrD;IACA,MAAMC,eAAe,GAAG,MAAMb,iBAAiB,CAC7C,sBAD6C,CAA/C,CAFqD,CAKrD;;IACA,IAAIF,YAAY,IAAIe,eAApB,EAAqC;MACnCX,eAAe,CAAC,CAAC,GAAGJ,YAAJ,EAAkB,GAAGe,eAArB,CAAD,CAAf;IACD;EACF,CATD;;EAWA,IAAI,CAACf,YAAL,EAAmB;IACjB,oBAAO;MAAK,SAAS,EAAC,6BAAf;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAP;EACD;;EAED,oBACE;IAAK,eAAY,uBAAjB;IAAA,WACGA,YAAY,CAACU,GAAb,CAAkBC,WAAD,iBAChB,QAAC,eAAD;MAEE,WAAW,EAAEA,WAFf;MAGE,OAAO,EAAER,OAHX;MAIE,sBAAsB,EAAEE;IAJ1B,GACOM,WAAW,CAACC,EADnB;MAAA;MAAA;MAAA;IAAA,QADD,CADH,eASE;MAAQ,OAAO,EAAEE,oBAAjB;MAAuC,QAAQ,EAAEX,OAAjD;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QATF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAeD,CA7DM;;GAAMJ,Y;UAG4BF,c;;;KAH5BE,Y"},"metadata":{},"sourceType":"module"}